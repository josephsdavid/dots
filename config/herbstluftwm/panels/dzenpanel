#!/usr/bin/env bash
quote() {
	local q="$(printf '%q ' "$@")"
	printf '%s' "${q% }"
}


hc_quoted="$(quote "${herbstclient_command[@]:-herbstclient}")"
hc() { "${herbstclient_command[@]:-herbstclient}" "$@" ;}

font="-*-tamsyn-bold-*-*-*-17-*-*-*-*-*-*-*"
glyph_font='-wuncon-siji-medium-r-normal--10-100-75-75-c-80-iso10646-1'
bgcolor='#292c2b'
selbg='#0087af'
selfg='#EFEFEF'
gray_col='#909090'
emptybg='#d70000'
fg_col='#efefef'
get_temp(){
	temps="$(sensors | grep °C|grep "temp1\|Composite" | tr "\t" " " | tr "+" " " | tr "°C" " " | awk '{print $2}')"
	divisor="$(echo "$temps" | wc -l)"
	sum="$(echo "$temps" | paste -sd+ - | bc)"

	echo "$sum / $divisor" | bc
}
get_bat() {
	acpi -b | awk '{print $3 $4}' | sed 's/,/ /g' 
}

get_ram() {
	free -b | grep Mem | awk '{ printf("%.0f\n",  ($3 * 100 / $2)) }';
}

get_swap() {
	free -b | grep Swap | awk '{ printf("%.0f\n",  ($3 * 100 / $2)) }';
}
get_cpu() {
	iostat -c | head -n 4 | tail -n 1 | awk '{print 100-$6}'
}

monitor=${1:-0}
geometry=( $(hc monitor_rect "$monitor") )
if [ -z "$geometry" ] ;then
    echo "Invalid monitor $monitor"
    exit 1
fi
# geometry has the format W H X r
pad_x=0
pad_y=0
x=$((geometry[0]+pad_x/2))
panel_height=36
y=${geometry[3]}
y=$((y-panel_height+geometry[1]-pad_y))
panel_width=$((geometry[2] - pad_x))

#$(hc get frame_border_normal_color)

####
# Try to find textwidth binary.
# In e.g. Ubuntu, this is named dzen2-textwidth.
if which textwidth &> /dev/null ; then
    textwidth="textwidth";
elif which dzen2-textwidth &> /dev/null ; then
    textwidth="dzen2-textwidth";
else
    echo "This script requires the textwidth tool of the dzen2 project."
    exit 1
fi
####
# true if we are using the svn version of dzen2
# depending on version/distribution, this seems to have version strings like
# "dzen-" or "dzen-x.x.x-svn"
if dzen2 -v 2>&1 | head -n 1 | grep -q '^dzen-\([^,]*-svn\|\),'; then
    dzen2_svn="true"
else
    dzen2_svn=""
fi

if awk -Wv 2>/dev/null | head -1 | grep -q '^mawk'; then
    # mawk needs "-W interactive" to line-buffer stdout correctly
    # http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=593504
    uniq_linebuffered() {
      awk -W interactive '$0 != l { print ; l=$0 ; fflush(); }' "$@"
    }
else
    # other awk versions (e.g. gawk) issue a warning with "-W interactive", so
    # we don't want to use it there.
    uniq_linebuffered() {
      awk '$0 != l { print ; l=$0 ; fflush(); }' "$@"
    }
fi

pad_height=$((panel_height+pad_y))
hc pad $monitor 0 0 $pad_height 0

{
    ### Event generator ###
    # based on different input data (mpc, date, hlwm hooks, ...) this generates events, formed like this:
    #   <eventname>\t<data> [...]
    # e.g.
    #   date    ^fg(#efefef)18:33^fg(#909090), 2013-10-^fg(#efefef)29

    #mpc idleloop player &
    while true ; do
	    date +$'date\t^fg()%H:%M:%S^fg(#909090) %Y-%m-^fg()%d'
	get_bat
	theme=$(hc getenv theme)
	get_ram
	$(get_temp)
	get_swap
	get_cpu
        sleep 0.5 || break
    done > >(uniq_linebuffered) &
    childpid=$!
    hc --idle
    kill $childpid
} 2> /dev/null | {
    IFS=$'\t' read -ra tags <<< "$(hc tag_status $monitor)"
    visible=true
    date=""
    windowtitle=""
    battery=""
    ram=""
    temp=""
    while true ; do

	# toggle some themes

        ### Output ###
        # This part prints dzen data based on the _previous_ data handling run,
        # and then waits for the next event to happen.

        separator="^bg()^fg($selbg)|"
	echo -n "$separator^bg()^fg(#d70000)^ca(1,$menu)<->^ca()$separator"
        # draw tags
        for i in "${tags[@]}" ; do
            case ${i:0:1} in
                '#')
                    echo -n "^bg($selbg)^fg($selfg)"
                    ;;
                '+')
                    echo -n "^bg($emptybg)^fg(#ffffff)"
                    ;;
                ':')
                    echo -n "^bg()^fg(#ffffff)"
                    ;;
                '!')
                    echo -n "^bg(#FF0675)^fg(#141414)"
                    ;;
                *)
                    echo -n "^bg()^fg(#ababab)"
                    ;;
            esac
            if [ ! -z "$dzen2_svn" ] ; then
                # clickable tags if using SVN dzen
                echo -n "^ca(1,$hc_quoted focus_monitor \"$monitor\" && "
                echo -n "$hc_quoted use \"${i:1}\") ${i:1} ^ca()"
            else
                # non-clickable tags if using older dzen
                echo -n " ${i:1} "
            fi
        done
        echo -n "$separator"
        echo -n "^bg()^fg() ${windowtitle//^/^^}"
        # small adjustments
	menu="$HOME/scripts/menus/system-menu.sh"
	right="$separator^bg()$ram$temp$separator$battery$date$separator "

        right_text_only=$(echo -n "$right" | sed 's.\^[^(]*([^)]*)..g')
        # get width of right aligned text.. and add some space..
        width=$($textwidth "$font" "$right_text_only        ")
        echo -n "^pa($(($panel_width - $width)))$right"
        echo

        ### Data handling ###
        # This part handles the events generated in the event loop, and sets
        # internal variables based on them. The event and its arguments are
        # read into the array cmd, then action is taken depending on the event
        # name.
        # "Special" events (quit_panel/togglehidepanel/reload) are also handled
        # here.

        # wait for next event
        IFS=$'\t' read -ra cmd || break
        # find out event origin
        case "${cmd[0]}" in
            tag*)
                #echo "resetting tags" >&2
                IFS=$'\t' read -ra tags <<< "$(hc tag_status $monitor)"
                ;;

            date)
                #echo "resetting date" >&2
                date="${cmd[@]:1}"
		bat="$(get_bat)"
		bat_stat="$(echo $bat | awk '{print $1}')"
		if [ "$(echo $bat | awk '{print $1}')" != "Discharging" ]; then
			bat_ico='^i(/home/david/Pictures/icons/ac.xbm)'
		else
			bat_ico='^i(/home/david/Pictures/icons/bat.xbm)'
		fi
		bat_num=$(echo "$bat" | awk '{print $2}')
		if [ "$(echo "$bat_num < 25"  | bc)" -eq 1 ]; then
			batfg="#d70000"
			if [ "$bat_stat" != "Charging" ]; then
				bat_ico='^i(/home/david/Pictures/icons/bat_empty.xbm)'
			fi
		elif [ "$(echo "25 <= $bat_num && $bat_num < 75" | bc)"  -eq 1 ]; then 
			batfg='#d75f00'
			if [ "$bat_stat" != "Charging" ]; then
				bat_ico='^i(/home/david/Pictures/icons/bat.xbm)'
			fi
		else
			batfg='#008700'
			if [ "$bat_stat" != "Charging" ]; then
				bat_ico='^i(/home/david/Pictures/icons/bat_full.xbm)'
			fi
		fi
		ram_num="$(get_ram)"
		if [ "$(echo "$ram_num < 25"  | bc)" -eq 1 ]; then
			ram_fg='#008700'
		elif [ "$(echo "25 <= $ram_num && $ram_num < 75" | bc)"  -eq 1 ]; then 
			ram_fg='#d75f00'
		else
			ram_fg="#d70000"
		fi
		swap_num="$(get_swap)"
		if [ "$(echo "$swap_num < 25"  | bc)" -eq 1 ]; then
			swap_fg='#008700'
		elif [ "$(echo "25 <= $swap_num && $swap_num < 75" | bc)"  -eq 1 ]; then 
			swap_fg='#d75f00'
		else
			swap_fg="#d70000"
		fi
		cpu_num="$(get_cpu)"
		if [ "$(echo "$cpu_num < 25"  | bc)" -eq 1 ]; then
			cpu_fg='#008700'
		elif [ "$(echo "25 <= $cpu_num && $cpu_num < 75" | bc)"  -eq 1 ]; then 
			cpu_fg='#d75f00'
		else
			cpu_fg="#d70000"
		fi
		temp_num="$(get_temp)"
		if [ "$(echo "$temp_num < 70"  | bc)" -eq 1 ]; then
			temp_fg='#008700'
		elif [ "$(echo "70 <= $temp_num && $temp_num < 90" | bc)"  -eq 1 ]; then 
			temp_fg='#d75f00'
		else
			temp_fg="#d70000"
		fi
		battery="^fg($batfg)$bat_ico:^fg($gray_col)$bat_num$separator"
		ram="^fg($ram_fg)^i(/home/david/Pictures/icons/mem.xbm):^fg($gray_col)$ram_num%^fg($cpu_fg) ^i(/home/david/Pictures/icons/cpu.xbm):^fg($gray_col)$cpu_num%"
		temp="^fg($temp_fg) ^i(/home/david/Pictures/icons/temp.xbm):^fg($gray_col)"$temp_num"C"
                ;;
            quit_panel)
                exit
                ;;
            togglehidepanel)
                currentmonidx=$(hc list_monitors | sed -n '/\[FOCUS\]$/s/:.*//p')
                if [ "${cmd[1]}" -ne "$monitor" ] ; then
                    continue
                fi
                if [ "${cmd[1]}" = "current" ] && [ "$currentmonidx" -ne "$monitor" ] ; then
                    continue
                fi
                echo "^togglehide()"
                if $visible ; then
                    visible=false
                    hc pad $monitor 0
                else
                    visible=true
                    hc pad $monitor $panel_height
                fi
                ;;
            reload)
                exit
                ;;
            focus_changed|window_title_changed)
                windowtitle="${cmd[@]:2}"
                ;;
            #player)
            #    ;;
        esac
    done

    ### dzen2 ###
    # After the data is gathered and processed, the output of the previous block
    # gets piped to dzen2.
    hc unlock
    

} 2> /dev/null | dzen2 -w $panel_width -x $x -y $y -fn "$font" -h $panel_height \
    -e "button3=exec;button4=exec:$hc_quoted use_index -1;button5=exec:$hc_quoted use_index +1" \
    -ta l -bg "$bgcolor" -fg "$fg_col"
