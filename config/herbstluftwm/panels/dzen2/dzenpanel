#!/usr/bin/env bash
. /home/david/.config/herbstluftwm/panels/dzen2/colors.sh
quote() {
	local q="$(printf '%q ' "$@")"
	printf '%s' "${q% }"
}

set_border() {
        layout="$(hc layout | grep FOCUS)"
        num_windows="$(echo "$layout" | grep -o '0x' | wc -l)"

        if [[ $(echo "$layout"  | grep  'max') ]] && [ "$num_windows" -gt 1 ]; then
                # bash ~/.config/herbstluftwm/bin/pulsar &
                herbstclient attr theme.active.color "$orange"
        else
                herbstclient attr theme.active.color "$blue2"
        fi
}
hc_quoted="$(quote "${herbstclient_command[@]:-herbstclient}")"
hc() { "${herbstclient_command[@]:-herbstclient}" "$@"; }

tag_names_fancy="1,,,,,,,,,"
IFS="," read -ra tag_names <<< "$tag_names_fancy"
frame_layout() {
        layout="$(hc layout | grep FOCUS)"
        num_windows="$(echo "$layout" | grep -o '0x' | wc -l)"
        case "$layout" in
                *'max'*) 
                        echo "^fg()Maximized ^fg($purple)  ^fg($purple)$num_windows"
                        ;;
                *'vertical'*)
                        echo "^fg()Vertical ^fg($purple)ﮆ ^fg($purple)$num_windows"
                        ;;
                *'horizontal'*)
                        echo "^fg()Horizontal ^fg($purple)ﮇ ^fg($purple)$num_windows"
                        ;;
                *'grid'*)
                        echo "^fg()Grid ^fg($purple)﩯 ^fg($purple)$num_windows"
                        ;;
        esac
}

font="-*-fixed-*-*-*-*-12-*-*-*-*-*-*-*"
bgcolor="$normal_bg" #'#000000'
selbg="$red" #'#d70000' #'#0087af'
#gray_col='#585858'
gray_col='#b9a476'
emptybg="$blue"
#fg_col='#ffffff'

fg_col='#d3c6aa'
bg_col="$yellow"
other_col="$blue"
source "$HOME/.config/herbstluftwm/panels/dzen2/get_funs.sh"
monitor=${1:-0}
geometry=($(hc monitor_rect "$monitor"))
if [ -z "$geometry" ]; then
	echo "Invalid monitor $monitor"
	exit 1
fi
# geometry has the format W H X r
pad_x=0
#pad_x=$((geometry[2] / 30))
pad_y=0
x=$((geometry[0] + pad_x / 2))
panel_height=30
#y=${geometry[3]}
#y=$((y - panel_height + geometry[1] - pad_y/2))
y=${geometry[1]}
panel_width=$((geometry[2] - pad_x))
pad_height=$((panel_height + pad_y))
hc setenv pad_height "$pad_height"
#hc pad $monitor 0 0 $pad_height 0
hc pad $monitor $pad_height 12 12 0 

#$(hc get frame_border_normal_color)

####
# Try to find textwidth binary.
# In e.g. Ubuntu, this is named dzen2-textwidth.
	textwidth="dzen2-textwidth"
####
# true if we are using the svn version of dzen2
# depending on version/distribution, this seems to have version strings like
# "dzen-" or "dzen-x.x.x-svn"
if dzen2 -v 2>&1 | head -n 1 | grep -q '^dzen-\([^,]*-svn\|\),'; then
	dzen2_svn="true"
else
	dzen2_svn=""
fi

if awk -Wv 2>/dev/null | head -1 | grep -q '^mawk'; then
	# mawk needs "-W interactive" to line-buffer stdout correctly
	# http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=593504
	uniq_linebuffered() {
		awk -W interactive '$0 != l { print ; l=$0 ; fflush(); }' "$@"
	}
else
	# other awk versions (e.g. gawk) issue a warning with "-W interactive", so
	# we don't want to use it there.
	uniq_linebuffered() {
		awk '$0 != l { print ; l=$0 ; fflush(); }' "$@"
	}
fi
{
	### Event generator ###
	# based on different input data (mpc, date, hlwm hooks, ...) this generates events, formed like this:
	#   <eventname>\t<data> [...]
	# e.g.
	#   date    ^fg(#efefef)18:33^fg(#b2b2b2), 2013-10-^fg(#efefef)29

	#mpc idleloop player &
	while true; do
    #b2b2b2
		date +$'date\t^fg()%H:%M:%S^fg(#b9a476) %m-%d'
		get_bat
		get_temp
		sleep 0.5 || break
	done > >(uniq_linebuffered) &
	childpid=$!
	hc --idle
	kill $childpid
} 2>/dev/null | {
	IFS=$'\t' read -ra tags <<<"$(hc tag_status $monitor)"
	visible=true
	date=""
        layout="$(frame_layout)"
	windowtitle=""
	battery=""
	#ram=""
	spotify=""
	temp=""
	while true; do

		# toggle some themes

		### Output ###
		# This part prints dzen data based on the _previous_ data handling run,
		# and then waits for the next event to happen.

		separator="^bg()^fg()"
                left="^fn(Noto Sans Display Nerd Font-12)^bg()^fg($red)^ca(1,$menu)^fn(Noto Sans Display Nerd Font-18)  ^fn(Noto Sans Display Nerd Font-12)$separator^ca()"
                filler=()
		# draw tags
		#draw_tags "${tags[@]}" "$selbg" "$selfg" "$emptybg" "$monitor"
		for i in "${tags[@]:0:9}"; do
			case ${i:0:1} in
			'#')
				left="$left^bg($bg_col)^fg($normal_bg)"
                                filler="${tag_names["${i:1}"]}"
				;;
			'+')
				left="$left^bg($blue)^fg($normal_bg)"
                                filler=${tag_names["${i:1}"]}
                                #filler="${i:1}"
				;;
			':')
				left="$left^bg()^fg()"
                                filler=${tag_names["${i:1}"]}
                                #filler="^c(8)"
				;;
			'!')
				left="$left^bg(#FF0675)^fg(#5c5f5e)"
                                filler=${tag_names["${i:1}"]}
                                #filler="^c(8)"
				;;
			*)
                                left=$left"^bg()^fg(#484848)"
                                filler=${tag_names["${i:1}"]}
                                #filler="^c(8)"
				;;
			esac
			# clickable tags if using SVN dzen
			left="$left^ca(1,$hc_quoted focus_monitor \"$monitor\" && "
			left="$left$hc_quoted use \"${i:1}\") $filler ^ca()"
		done
                left="$left$separator$layout$separator"
		left="$left^bg()^fg()${windowtitle//^/^^}"
		# small adjustments
		menu="$HOME/scripts/menus/system-menu.sh"
                #menu="$HOME/.config/herbstluftwm/panels/dzen2/menu.sh"
		left="$left"
                right="^bg()$battery$separator$temp$separator$date$spotify "

		right_text_only=$(echo -n "$right::::" | sed 's.\^[^(]*([^)]*)..g' | tr -c "[:alnum:]" " " | tr -s "|" )
		# get width of right aligned text.. and add some space..

		width=$($textwidth "$font" "$right_text_only")
		echo -n "$left^pa($(($panel_width - $width)))$right"
		echo

		### Data handling ###
		# This part handles the events generated in the event loop, and sets
		# internal variables based on them. The event and its arguments are
		# read into the array cmd, then action is taken depending on the event
		# name.
		# "Special" events (quit_panel/togglehidepanel/reload) are also handled
		# here.

		# wait for next event
		IFS=$'\t' read -ra cmd || break
		# find out event origin
		case "${cmd[0]}" in
		tag*)
			#echo "resetting tags" >&2
			IFS=$'\t' read -ra tags <<<"$(hc tag_status $monitor)"
			;;

		date)
			#echo "resetting date" >&2
			date="${cmd[@]:1}$separator"
			. "$HOME/.config/herbstluftwm/panels/dzen2/battery.sh" "$(get_bat)"
			#. "$HOME/.config/herbstluftwm/panels/dzen2/ram.sh" "$(get_ram)"
                        #. "$HOME/.config/herbstluftwm/panels/dzen2/cpu.sh" "$(get_cpu)"
			. "$HOME/.config/herbstluftwm/panels/dzen2/temp.sh" "$(get_temp)"
			if [ "$(playerctl -l | grep spotify)" ]; then
        #b2b2b2
				spotify=$(. "$HOME/.config/herbstluftwm/panels/dzen2/spotify.sh" "$fg_col" "#b9a476")
				spotify="^fg(#b9a476)$spotify"
				spotify="^ca(2, playerctl -p spotify play-pause)^ca(3, playerctl -p spotify next)^ca(1, playerctl -p spotify previous)$spotify^ca()^ca()^ca()$separator"
			else
				spotify=""
			fi

			battery="^fg($batfg)$bat_ico ^fg($fg_col)$bat_num%"
			#ram="^fg($ram_fg)  ^fg($gray_col)$ram_num%^fg($cpu_fg)  ^fg($gray_col)$cpu_num%"
			temp="^fg($temp_fg)  ^fg($fg_col)"$temp_num"糖"
			;;
		quit_panel)
			exit
			;;
		togglehidepanel)
			currentmonidx=$(hc list_monitors | sed -n '/\[FOCUS\]$/s/:.*//p')
			if [ "${cmd[1]}" -ne "$monitor" ]; then
				continue
			fi
			if [ "${cmd[1]}" = "current" ] && [ "$currentmonidx" -ne "$monitor" ]; then
				continue
			fi
			echo "^togglehide()"
			if $visible; then
				visible=false
				hc pad $monitor 0
			else
				visible=true
				hc pad $monitor $panel_height
			fi
			;;
		reload)
			exit
			;;
		dmenu)
			windowtitle="Launch an Application"
			;;
		wallpaper)
			windowtitle="Select a wallpaper"
			;;
		window_search)
			windowtitle="Select a Window"
			;;
		package_search)
			windowtitle="Install NixOs Packages"
			;;
		reload_settings | system_settings)
			windowtitle="System Settings"
			;;
		logout)
			windowtitle="Log Out"
			;;
		monitorconfig)
			windowtitle="Monitor Configuration"
			;;
		bookselector)
			windowtitle="Book Selector"
			;;
		system_menu)
			windowtitle="System Menu"
			;;
		focus_changed | window_title_changed)
                        set_border
                        layout="$(frame_layout)"
			windowtitle="${cmd[@]:2}"
                        windowtitle="$(echo $windowtitle | cut -c 1-50)"
			;;
                layout_changed)
                        set_border
                        layout="$(frame_layout)"
			#player)
			#    ;;
		esac
	done

	### dzen2 ###
	# After the data is gathered and processed, the output of the previous block
	# gets piped to dzen2.
	hc unlock

} \
	2>/dev/null | dzen2 -w $panel_width -x $x -y $y -fn "$font" -h $panel_height  \
	-e "button3=exec;button4=exec:$hc_quoted use_index -1;button5=exec:$hc_quoted use_index +1;entertitle=uncollapse;enterslave=grabkeys;leaveslave=collapse,ungrabkeys;" \
	-ta l -bg "$bgcolor" -fg "$fg_col" -title-name my_panel &

echo "$panel_width"
